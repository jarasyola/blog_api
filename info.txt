1. Introduction
Why:
   -FastAPI - asynchronous programming not available in Django framework.
   -Automatic docs
       . Swagger UI 
       . ReDoc
   - Just use modern python (uses python 3.6 with type using pydantic)
   (Pydantic - is data validation and settings management using python type hints)
   - Based on open standards (JSON Schema, Open API)
   - Editor support (Vscode, Pycharm ) eg. auto complete 
   - Security and authentication 
       . HTTP Basic
       . OAuth2 (also with JWT tokens)
       . API keys in 
            .. Headers
            .. Query parameters
            .. Cookies, etc
    - Dependency Injection, unlimited "plug-ins", texted
    - Use Starlette Features - another python framework
        . WebSocket support
        . GraphQL support
        . In-process background tasks 
        . Startup and shutdown events 
    - Other Supports
        . SQL databases
        . NoSQL databases 
        . GraphQL 


2. Getting Started
   - Install and Setup 
   - Break it down, how it structured

3. Basic Concepts   
    - Path Parameters 
    - API Docs - swagger/redocs 
    - Query parameters 
    - Request body 

4. Intermediate Concepts 
    - Degugging FastAPI 
    - Pydantic Schemas 
    - SqlAlchemy database connection 
    - Models and table 

5. Database Tasks 
    - Store blog to database 
    - Get blogs from database 
    - Delete
    - Update 

6. Responses 
    - Handling Exceptions 
    - Return response 
    - Define response model 

7. User and Password
    - Create user 
    - Hash user password 
    - Show singer user 
    - Define docs tags 

8. Relationship 
    - Define User to blog relationship 
    - Define blog to user relationship 

9. Refactor for the bigger Applications 
    - API Router 
    - API Router with parameters 

10. Authentication using JWT 
     - Create Login route 
     - Login and verify password 
     - Return JWT access token 
     - Route behind authentication 

11. Deploy FastAPI 
     - Using Deta.sh website to deploy 